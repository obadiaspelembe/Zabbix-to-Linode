variables:
  TF_DIR: "infrastructure"

stages:
  - terraform-plan
  - terraform-apply
  - terraform-destroy
  - ansible-deploy


terraform-plan:
  image: 
    name: hashicorp/terraform:1.8
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: terraform-plan
  script:
    - terraform -chdir=$TF_DIR init
    - terraform -chdir=$TF_DIR plan -out "plan.tfplan"
    - ls $TF_DIR 
  artifacts:
    paths:
      - "infrastructure/plan.tfplan"

terraform-apply:
  image:  
    name: hashicorp/terraform:1.8
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: terraform-apply
  script:
    - terraform -chdir=$TF_DIR init
    - terraform -chdir="infrastructure" apply -auto-approve "plan.tfplan" 
    - terraform -chdir="infrastructure" output -raw server_host >> .server_host
    - echo "linode_server ansible_host=$(eval cat .server_host)" >> hosts
  when: manual
  artifacts:
    paths:
      - "infrastructure/plan.tfplan"
      - "hosts"

terraform-destroy:
  stage: terraform-destroy
  script:
    - echo "Terraform destroy"
  when: manual

ansible-deploy:
  stage: ansible-deploy
  image:
    name: jfxs/ansible
  variables:
    - ANSIBLE_HOST_KEY_CHECKING: "False"
  needs:
    - terraform-apply
  script:
    - ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -u root -i hosts -e 'ansible_user=root' -e 'ansible_password=$TF_VAR_root_pass' playbook.yml
